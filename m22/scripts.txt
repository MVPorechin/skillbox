print('14.3 Командная строка и интерпретатор')
print('Задача 1. Таблица умножения: возвращение')

for i in range(1, 10):
    for j in range(1, 10):
        print(i * j, end='\t')
    print()

print('Задача 2. Калькулятор')

while True:
    command = input("Выберите операцию: ")
    if command in "+-*/":
        break
    print("Ошибка: такой операции не существует. Попробуйте ещё раз.")


first = int(input("Введите первое число: "))
second = int(input("Введите второе число: "))

result = 0
if command == "+":
    result = first + second
elif command == "-":
    result = first - second
elif command == "*":
    result = first * second
elif command == "/":
    result = first / second

print(f"{first} {command} {second} = {result}")


first = int(input("Введите первое число: "))
second = int(input("Введите второе число: "))

result = 0
if command == "+":
    result = first + second
elif command == "-":
    result = first - second
elif command == "*":
    result = first * second
elif command == "/":
    result = first / second

print(f"{first} {command} {second} = {result}")

print('Задача 3. Калькулятор 2')

while True:
    command = input("Выберите операцию: ")
    if command in "+-*/":
        break
    print("Ошибка: такой операции не существует. Попробуйте ещё раз.")

count = 1
number = int(input(f"Введите число {count}: "))
result_str = str(number)
result = number
while number != 0:
    count += 1
    number = int(input(f"Введите число {count}: "))

    if command == "+":
        result += number
    elif command == "-":
        result -= number
    elif command == "*":
        result *= number
    elif command == "/":
        result /= number
    result_str += " " + command + " " + str(number)

print(result_str + " = " + str(result))

print('14.4 Работа в PyCharm. Отладка программ')
print('Задача 2. НОД')
def gcd(a, b):

    while a != 0 and b != 0:
        if a > b:
            a = a % b
        else:
            b = b % a

    print(f'Наибольший общий делитель: {a + b}')

gcd(30, 18)



********************************************************************************

# print('m14 Задача 1. Таблица степеней')
# numbers = [3, 7, 5]
# while True:
#     number = int(input('Новое число: '))
#     numbers.append(number)
#     print('Текущий список чисел:', numbers)
#     for _ in numbers:
#         print(_ ** 2, _ ** 3, _ ** 4)
# print()

# print('m14 Задача 1. Очень простая задача')
# list = []
# for _ in range(0,101):
#     list.append(_)
# print(list)

# print('m14 Задача 3. Контроль')
# count_personal = int(input('Введите кол-во сотрудников: '))
# list_id = []
# for _ in range(count_personal):
#     id_personal = int(input('ID сотрудника: '))
#     list_id.append(id_personal)
# search_id = int(input('Какой ID ищем?: '))
# if search_id not in list_id:
#     print(f'Сотрудник {search_id} не работает!')
# else:
#     print('Все сотрудники на работе')

# print('m14 Задача 1. Гугл')
# nums_list = []
# N = int(input('Кол-во чисел в списке: '))
#
# for _ in range(N):
#     num = int(input('Очередное число: '))
#     nums_list.append(num)
#
# if nums_list:
#     maximum = nums_list[0]
#     minimum = nums_list[0]
#     for i in nums_list:
#         if maximum < i:
#             maximum = i
#         elif minimum > i:
#             minimum = i
#
# print(f'Максимальное число в списке: {maximum}')
# print(f'Минимальное число в списке: {minimum}')

# print('m14 Задача  2. Кратность')
# nums_list = []
# N = int(input('Кол-во чисел в списке: '))
#
# for i in range(1, N + 1):
#     num = int(input(f'Введите {i} число: '))
#     nums_list.append(num)
#
# divider = int(input('\nВведите делитель: '))
# index = 0
# sum_indexes = 0
# for number in nums_list:
#     if number % divider == 0:
#         print(f'Индекс числа {number}: {index}')
#         sum_indexes += index
#         index += 1
# print(f'\nСумма индексов: {sum_indexes}\n')
#
# sum_indexes = 0
# for index, number in enumerate(nums_list):
#     if number % divider == 0:
#         print(f'Индекс числа {number}: {index}')
#         sum_indexes += index

print('m14 Задача 3. Собачьи бега')
nums_list = []

N = int(input('Кол-во чисел в списке: '))

for _ in range(N):
    num = int(input('Очередное число: '))
    nums_list.append(num)

if nums_list:
    maximum = nums_list[0]
    minimum = nums_list[0]

    minimum_index = 0
    maximum_index = 0
    for index, i in enumerate(nums_list):

        if maximum < i:
            maximum = i
            maximum_index = index

        if minimum > i:
            minimum = i
            minimum_index = index

    print('Максимальное число в списке:', maximum)
    print('Минимальное число в списке:', minimum)

    print(nums_list)
    nums_list[minimum_index], nums_list[maximum_index] = nums_list[maximum_index], nums_list[minimum_index]
    print(nums_list)
else:
    print('В списке нету чисел')


********************************************************************************

# print('m15 Задача 1. Таблица степеней')
# numbers = [3, 7, 5]
# while True:
#     number = int(input('Новое число: '))
#     numbers.append(number)
#     print('Текущий список чисел:', numbers)
#     for _ in numbers:
#         print(_ ** 2, _ ** 3, _ ** 4)
# print()

# print('m15 Задача 1. Очень простая задача')
# list = []
# for _ in range(100):
#     list.append(_)
# print(list)

# print('m15 Задача 3. Контроль')
# count_personal = int(input('Введите кол-во сотрудников: '))
# list_id = []
# for _ in range(count_personal):
#     id_personal = int(input('ID сотрудника: '))
#     list_id.append(id_personal)
# search_id = int(input('Какой ID ищем?: '))
# if search_id not in list_id:
#     print(f'Сотрудник {search_id} не работает!')
# else:
#     print('Все сотрудники на работе')

# print('m15 Задача 1. Гугл')
# nums_list = []
# N = int(input('Кол-во чисел в списке: '))
#
# for _ in range(N):
#     num = int(input('Очередное число: '))
#     nums_list.append(num)
#
# if nums_list:
#     maximum = nums_list[0]
#     minimum = nums_list[0]
#     for i in nums_list:
#         if maximum < i:
#             maximum = i
#         elif minimum > i:
#             minimum = i
#
# print(f'Максимальное число в списке: {maximum}')
# print(f'Минимальное число в списке: {minimum}')

# print('m15 Задача  2. Кратность')
# nums_list = []
# N = int(input('Кол-во чисел в списке: '))
#
# for i in range(1, N + 1):
#     num = int(input(f'Введите {i} число: '))
#     nums_list.append(num)
#
# divider = int(input('\nВведите делитель: '))
# index = 0
# sum_indexes = 0
# for number in nums_list:
#     if number % divider == 0:
#         print(f'Индекс числа {number}: {index}')
#         sum_indexes += index
#         index += 1
# print(f'\nСумма индексов: {sum_indexes}\n')
#
# sum_indexes = 0
# for index, number in enumerate(nums_list):
#     if number % divider == 0:
#         print(f'Индекс числа {number}: {index}')
#         sum_indexes += index

# print('m15 Задача 3. Собачьи бега')
# nums_list = []
#
# N = int(input('Кол-во чисел в списке: '))
#
# for _ in range(N):
#     num = int(input('Очередное число: '))
#     nums_list.append(num)
#
# if nums_list:
#     maximum = nums_list[0]
#     minimum = nums_list[0]
#
#     minimum_index = 0
#     maximum_index = 0
#     for index, i in enumerate(nums_list):
#
#         if maximum < i:
#             maximum = i
#             maximum_index = index
#
#         if minimum > i:
#             minimum = i
#             minimum_index = index
#
#     print('Максимальное число в списке:', maximum)
#     print('Минимальное число в списке:', minimum)
#
#     print(nums_list)
#     nums_list[minimum_index], nums_list[maximum_index] = nums_list[maximum_index], nums_list[minimum_index]
#     print(nums_list)
# else:
#     print('В списке нету чисел')

# word = input('Введите слово: ')
# replace_num = int(input('Номер символа для замены: '))
# replace_sym = input('Чем заменяем: ')
#
# # sym_list = []
# # for sym in word:
# #     sym_list.append(sym)
# sym_list = list(word)
# sym_list[replace_num - 1] = replace_sym
#
# for i in sym_list:
#     print(i, end='')
#
# print(sym_list)

# words_list = []
# counts = [0, 0, 0]
# for i in range(3):
#     print(f'Введите {i + 1} слово: ', end='')
#     word = input()
#     words_list.append(word)
#
# text = input('Слово из текса: ')
# while text != 'end':
#     for index in range(3):
#         if words_list[index] == text:
#             counts[index] += 1
#     text = input('Слово из текса: ')
#
# print('\nПодсчет слов в тексе: ')
# for i in range(3):
#     print(f'{words_list[i]} : {counts[i]}')

# print('m15 Задача 3.1. Текстовый редактор: возвращение')
#
# user_msg = 'гвозди:шурупы:гайки'
# letters = list(user_msg)
# what_replace = ':'
# for_what_replace = ';'
# for index, letter in enumerate(letters):
#     if letter == what_replace:
#         letters[index] = for_what_replace
#
# for letter in letters:
#     print(letter, end='')
#
print('m15 Задача 3.2.Соседи')
user_string = input('Введите строку: ')
letters = list(user_string)
number_letters = int(input('Введите номер символа: ')) - 1
count = 0
print(f'Символ слева: {letters[number_letters - 1]}')
print(f'Символ справа: {letters[number_letters + 1]}')

for index, letter in enumerate(letters):
    if letter == letters[number_letters - 1]:
        count += 1

if count >= 2:
    print(f'Есть ровно один такой же символ {letters[number_letters ]}')
elif count

********************************************************************************

# print('m16.1 - Задача 1. Зоопарк')
# # В маленьком зоопарке каждое животное сидит в отдельной клетке, всего этих животных четверо: лев, кенгуру, слон и обезьяна. В базе данных они хранятся в виде вот такого списка:
# zoo = ['lion', 'kangaroo', 'elephant', 'monkey']
# # Сегодня в зоопарк завезли медведя (bear) и посадили его между львом и кенгуру. В итоге животных стало пять. А через неделю слона перевезли в другое место и в списке снова стало четверо животных.
# # Реализуйте эти действия в коде программы и выведите в консоль итоговый список животных, а также покажите, в какой клетке сидят лев и обезьяна. Для этого используйте методы списков.
# zoo.insert(1, 'bear')
# zoo.remove('elephant')
# print(f'Зоопарк: {zoo}')
# print(f'Лев сидит в клетке номер: {zoo.index("lion") + 1}')
# print(f'Обезьяна сидит в клетке номер: {zoo.index("monkey") + 1}')

# print('m16.1 - Задача 2. Сокращения')
# # В одной компании наступили «тёмные времена», и сотрудников стали сокращать. Зарплаты сотрудников хранятся в списке из N этих самых зарплат. Зарплаты уже уволенных сотрудников обозначаются в списке числом 0.
# # Напишите программу, которая запрашивает у пользователя количество сотрудников и их зарплаты, затем удаляет все элементы списка со значением 0 и выводит в консоль, сколько сотрудников осталось, а также их зарплаты. Дополнительный список использовать нельзя.
#Дополнительно: выведите на экран максимальную и минимальную зарплату оставшихся сотрудников. Для этого используйте функции max и min. Да, те самые, которыми нельзя называть переменные. В скобках функций просто укажите список.
# count_personal = int(input('Введите кол-во сотрудников: '))
# salary_list = []
# personal = 0
# for _ in range(count_personal):
#     salary = int(input(f'Зарплата {_ + 1} сотрудника: '))
#     if salary != 0:
#         salary_list.append(salary)
#         personal += 1
# print(f'\nОсталось сотрудников: {personal}')
# print(f'Зарплаты: {salary_list}')
# print(f'Максимальная зп: {max(salary_list)}')
# print(f'Минимальная зп: {min(salary_list)}')

# print('m16.1 - Задача 3. Кино')
# Мы поддерживаем свой киносайт и хотим сделать так, чтобы пользователи после регистрации могли создать собственный рейтинг фильмов из тех, которые есть на сайте. Вот сам список фильмов (конечно же, можете брать свои):
# Напишите программу, которая позволяет добавлять в свой рейтинг фильмы, удалять их оттуда, а также вставлять на нужное пользователю место. Обеспечьте контроль ввода и сделайте так, чтобы в список нельзя было добавить один и тот же фильм несколько раз.
# films = [
#     'Крепкий орешек', 'Назад в будущее', 'Таксист',
#     'Леон', 'Богемская рапсодия', 'Город грехов',
#     'Мементо', 'Отступники', 'Деревня',
#     'Проклятый остров', 'Начало', 'Матрица'
# ]
#
# n = int(input("Сколько фильмов выбрать? "))
# your_films = []
# for i in range(n):
#     print("Ваш текущий топ фильмов:", your_films)
#     film_name = input("Имя фильма: ")
#     print("Команды: добавить, вставить, удалить")
#     command = input("Введите команду: ")
#     if film_name not in your_films:
#         if command == "добавить":
#             your_films.append(film_name)
#         elif command == "вставить":
#             insert_index = int(input("Введите индекс для вставки "))
#             insert_index %= len(your_films)  # ограничим индекс списка, чтобы он не вылезал за границу списка
#             your_films.insert(insert_index, film_name)
#     else:
#         if command == "удалить":
#             your_films.remove(film_name)
#
# print("Ваш текущий топ фильмов:", your_films)

# print('m16.2 - Задача 1. Задачи компаний')
# Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше.
# Конечно же, все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.
# Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):
#
# main_list = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
# first_company = [0, 0, 0]
# second_company = [1, 0, 0, 1, 1]
# third_company = [1, 1, 1, 0, 1]
# # Напишите программу, которая расширяет список main элементами остальных списков, выведите итоговый список, а также выведите количество невыполненных задач.
# # Результат работы программы:
# # Общий список задач: [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1]
# # Кол - во невыполненных задач: 10
#
# main_list.extend(first_company)
# main_list.extend(second_company)
# main_list.extend(third_company)
# print(f'Общий список задач: {main_list}')
# print(f'Кол - во невыполненных задач: {main_list.count(0)}')

# print('m16.2 - Задача 2. Вредоносное ПО')
# Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт,
# который после двух сообщений отправляет ещё одно на основе первых двух.
# Пользователь вводит две строки. В каждой из них есть какое-то количество специальных символов ! и ?.
# Напишите программу, которая считает количество этих символов отдельно в первой строке и отдельно во второй.
# Если в первой строке их больше, чем во второй, то на экран выводится первая строчка, объединённая со второй,
# а иначе — вторая с первой. При равном количестве символов в строках выводится «Ой».

# first_message = input('Первое сообщение: ')
# second_message = input('Второе сообщение: ')
# first_count = first_message.count('!') + first_message.count('?')
# second_count = second_message.count('!') + second_message.count('?')
# if first_count < second_count:
#     first_message, second_message = second_count, first_message
# elif first_count == second_count:
#     print('Ой')
# print(f'{first_message + second_message}')

# print('m16.2 - Задача 3. Пакеты')
# При работе с сервером мы кодируем сообщение и отправляем его в виде пакетов информации. Их количество равно N.
# Допустим, каждый пакет содержит четыре числа, каждое из которых равно нулю или единице. Эти числа называются битами.
# Иногда в кодировке сообщения встречаются ошибки, и в пакете эта ошибка обозначается числом -1.
# Если таких ошибок не больше одной, то этот пакет мы целиком добавляем в список для декодирования, а иначе отбрасываем.
# Напишите программу, которая будет обрабатывать полученные пакеты и выведет на экран итоговое сообщение для декодирования,
# а также количество ошибок в нём и количество необработанных пакетов.
#
# pack = []
# decode = []
# bad_packs = 0
# packs_amt = int(input('Кол-во пакетов: '))
#
# for i_pack_num in range (packs_amt):
#     print(f'Пакет номер {i_pack_num + 1}')
#     for i_bit in range(4):
#         num = int(input(f'Бит {i_bit + 1} :'))
#         pack.append(num)
#     if pack.count(-1) <= 1:
#         decode.extend(pack)
#     else:
#         print('Много ошибок в пакете')
#         bad_packs += 1
#     pack = []
# print(f'\nПолученное сообщение: {decode}')
# print(f'Кол-во ошибок в сообщении: {decode.count(-1)}')
# print(f'Кол-во потерянных пакетов: {bad_packs}')

# number_of_msgs = int(input("Количество пакетов: "))
# result_msg = []
# lost_packages = 0
# for _ in range(number_of_msgs):
#     print(f'\nПакет номер {_ + 1}')
#     buffer = []
#     errors_in_package = 0
#     for i in range(1, 5):
#         bit = int(input(f"{i} бит: "))
#         buffer.append(bit)
#         if bit < 0:
#             errors_in_package += 1
#     if errors_in_package <= 1:
#         result_msg.extend(buffer)
#     else:
#         lost_packages += 1
#
# print("Полученное сообщение:", result_msg)
# print("Кол-во ошибок в сообщении:", result_msg.count(-1))
# print("Кол-во потерянных пакетов:", lost_packages)

# N = int(input('Кол-во участников: '))
# members = list(range(1, N + 1))
# print(members)

# N = int(input('Кол-во участников: '))
# members = []
# num = 1
# for _ in range(N // 3):
#     members.append(list(range(num, num + 3)))
#     num += 3
# print(f'\n{members}')
# print('')
# for i_team in members:
#     print(i_team)
#     print('')
# for i_team in members:
#     for i_man in i_team:
#         print(i_man, end= ' ')
#     print()
#
# вложенные списки
# words_list = [['', 0], ['', 0], ['', 0]]
#
# for i_num in range(3):
#     word = input(f'Введите {i_num + 1} слово: ')
#     words_list[i_num][0] = word
#
# text = input('Слово из текста: ')
# while text != 'end':
#     for index in range(3):
#         if words_list[index][0] == text:
#             words_list[index][1] += 1
#     text = input('Слово из текста: ')
#
# print('\n Подсчет слов в тексте:')
# for index in range(3):
#     print(f'{words_list[index]} : {words_list[index][1]}')

# print('m16.3 - Задача 1. Матрица')
# Дан вот такой список со списками:
# matrix = [[1, 2 ,3], [4, 5, 6], [7, 8, 9]]
# # Реализуйте программу, которая выводит элементы этого списка в виде привычной нам матрицы.
# for i_matrix in matrix:
#     for number in i_matrix:
#         print(f'{number}', end=' ')
#     print('')
# print('m16.3 - Задача 2. Олимпиада')
# # В олимпиаде по программированию участвует N человек, в списке участников они обозначаются под номерами 1, 2, 3, 4 и так далее до N. Эти участники поделены на команды по K человек.
# # Напишите программу, которая принимает на вход количество участников и количество человек в каждой команде, затем генерирует список таких команд и выводит его на экран.
# # Обеспечьте контроль ввода: в каждой команде должно быть ровно по K человек.
# count_members = int(input('Кол-во участников: '))
# count_members_in_group = int(input('Кол-во человек в команде: '))
# members = []
# num = 1
# if count_members % count_members_in_group == 0:
#     for _ in range(count_members // count_members_in_group):
#         members.append(list(range(num, num + count_members_in_group)))
#         num += count_members_in_group
#     print(f'\nОбщий список команд: {members}')
# else:
#     print(f'{count_members} участников невозможно поделить на команды по {count_members_in_group} человек!')

# print('m16.3 - Задача 3. Лавка')

# В небольшой фруктовой лавке у каждого фрукта есть название и цена. Эта информация хранится в одном большом списке, вот так:
# goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]
# Недавно в лавку привезли новый fruit_name по цене price, а после этого случилось ужасное: повысили налоги. А значит, повысились и цены на фрукты, на целых 8%!
# Реализуйте код, который добавляет в список goods ещё один список с новым фруктом и ценой (это запрашивается у пользователя), а затем увеличивает цены всех фруктов на 8%.

# new_goods = []
# add_goods = input('Новый фрукт: ')
# add_price = int(input('Цена: '))
# goods.append([add_goods, add_price])
# new_tax = int(input('Введите налог: '))
# new_tax /= 100
# print(f'Новый ассортимент: {goods}')
# for index in goods:
#     index[1] = round(index[1] * new_tax, 2)
# print(f'Новый ассортимент с увел. ценой: {goods}')
print('m16.4 - Задача 3. Лавка')

********************************************************************************

# print('List comprehensions')
# squares = [x ** 2 for x in range(10)]
# print(f'{squares}\n')
#
#
# def get_higher_price(percent, price):
#     return round(price * (1 + percent / 100), 2)
#
#
# prices_now = [1.9, 22.34, 56.3, 52.9, 88.5, 99.4]
# first_percent = int(input('Повышение на первый год: '))
# second_percent = int(input('Повышение на второй год: '))
# prices_first = [get_higher_price(first_percent, i_price) for i_price in prices_now]
# prices_second = [get_higher_price(second_percent, i_price)for i_price in prices_first]
#
# print(f'Сумма цен за каждый год {round(sum(prices_now), 2), round(sum(prices_first), 2), round(sum(prices_second), 2)}')

# print('17.1 - Задача 1. Кубы и квадраты')
# Пользователь вводит числа A и B. Напишите программу, которая генерирует два списка: в первом лежат кубы чисел в диапазоне от А до В, во втором — квадраты чисел в этом же диапазоне. Выведите списки на экран. Для генерации используйте list comprehensions (как и в следующих задачах).
# left_limit = int(input('Левая граница: '))
# right_limit = int(input('Правая граница: '))
# squares = [x ** 2 for x in range(left_limit, right_limit + 1)]
# cubes = [x ** 3 for x in range(left_limit, right_limit + 1)]
# print(f'Список кубов чисел в диапазоне от {left_limit} до {right_limit}: {cubes}')
# print(f'Список квадратов чисел в диапазоне от {left_limit} до {right_limit}: {squares}')

# print('17.1 - Задача 2. Сообщение')
# Илья решил безобидно подшутить над другом и написал программу для смартфона, которая при отправке сообщения удваивает каждый символ строки и заодно к каждому удвоенному добавляет ещё один дополнительный.
# Пользователь вводит строку и дополнительный символ. Напишите программу, которая генерирует два списка: в первом списке каждый элемент — удвоенная буква первой строки, во втором списке каждый элемент — конкатенация элемента первого списка и дополнительного символа.
# word = input('Введите строку: ')
# word_special_symbol = input('Введите дополнительный символ: ')
# word_list = [abc + abc for abc in word]
# word_list_special = [abc + abc + word_special_symbol for abc in word]
# print(f'{word_list}')
# print(f'{word_list_special}')

# print('17.1 - Задача 3. Повышение цен')

# Дан список цен на пять товаров с точностью до копейки. Так как экономика даёт о себе знать, мы спрогнозировали, что через год придётся повышать цены на X процентов, а ещё через один год — ещё на Y процентов.
# Напишите программу, которая получает на вход список цен на товары (вещественные числа, список генерируется также с помощью list comprehensions) и выводит в одну строку общую сумму стоимости товаров за каждый год.

# prices = [float(input('Цена за товар :')) for _ in range(5)]
# first_year_percent = int(input('Повышение на первый год: '))
# second_year_percent = int(input('Повышение на второй год: '))
#
# result_prices = []
# for percent in 0, first_year_percent, second_year_percent:
#     prices = [price * (1 + percent / 100) for price in prices]
#     result_prices.append(round(sum(prices), 2))
#
# print(f'Сумма цен за каждый год: {result_prices}')


# squares_odds = [x ** 2 for x in range(10) if x % 2 != 0]
# squares_cubes = [(x ** 2 if x % 2 != 0 else x ** 3) for x in range(10)]
#
# print(f'{squares_odds}\n')
# print(f'{squares_cubes}\n')
#


# print('17.2 - Задача 1. Список чётных чисел')
# Пользователь вводит два числа: А и В. Реализуйте код, который генерирует список из чётных чисел в диапазоне от А до B. Используйте list comprehensions (как и в следующих задачах).
# numbers_a = int(input('Введите число А: '))
# numbers_b = int(input('Введите число В: '))
# condition = [random.randint(numbers_a, numbers_b) % 2 == 0 for _ in range(numbers_a, numbers_b +1)]
# # result = [condition[_] % 2 == 0 for _ in range(numbers_a, numbers_b)]
#
# print(f'Результат от {numbers_a} до {numbers_b} : {condition}')

# original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
# prices = [price if price > 0 else 0 for price in original_prices]
# print(f'Результат : {prices}')

# print('17.4 - Задача 3. Отряды')
# Мы продолжаем пробовать себя в качестве разработчика игр. Теперь нужно написать небольшую логику поведения некоторых отрядов, а также их урон. Есть два отряда, в каждом по 10 монстров. В первом отряде у каждого монстра урон абсолютно случайный и колеблется от 50 до 80, а во втором — от 30 до 60. Оба отряда вместе напали на третий, также из 10 юнитов. Юнит третьего отряда погибает, если сумма урона от двух монстров больше 100.
#
# Напишите программу, которая генерирует случайные значения в первых двух списках в заданных диапазонах, а также генерирует список, состоящий из фраз «Погиб» или «Выжил». Выведите все списки на экран.
# import random
#
# squad_1 = [random.randint(50, 80) for _ in range(10)]
# squad_2 = [random.randint     for i_damage in range(10)]
#(30, 60) for _ in range(10)]
# squad_3_condition = [('Погиб' if squad_1[i_damage] + squad_2[i_damage] > 100
#                       else 'Выжил')
#
# print(f'Урон от первого отряда: {squad_1}')
# print(f'Урон от первого отряда: {squad_2}')
# print(f'Состояние третьего отряда: {squad_3_condition}')

# nums = [x for x in range(1, 101) if x % 10 == 0]
# new_nums = nums[:]
# new_nums[3] = 0
# print(new_nums[:])
# print(new_nums[3:])  # от 3 индекса
# print(new_nums[:5])  # до 5 индекса
# print(new_nums[2:5])  # от 2 до 5 индекса
# for i_elem in range(2, 8):
#     print(nums[i_elem], end = ' ')
#
# print('')
#
# for i_elem in range(2, 8):
#     print(new_nums[i_elem], end = ' ')
#
# print(f'{new_nums[2:8]}')

# nums[2:8:2]  # от 2 до 8 индекс, с шагом 2
# nums[::-1]  # перевернуть список - "отзеркалить"

# start_sequence = [1, 2, 3, 4, 5]
# finish_sequence = []
# count_sequence = int(input('Кол-во чисел: '))
# for _ in range(1, count_sequence + 1):
#     number = int(input('Число: '))
#     start_sequence.append(number)
# print(f'Последовательность: {start_sequence}')


# def symmetry(start_sequence):
#     reverse_list = start_sequence[::-1]
#     if start_sequence == reverse_list:
#         return True
#     else:
#         return False
#
#
# for i_nums in range(0, len(start_sequence)):
#     if symmetry(start_sequence[i_nums:len(start_sequence)]):
#         finish_sequence = start_sequence[:i_nums]
#         finish_sequence.reverse()
#         break
#
# print(f'Исходный список:  {start_sequence}')
# print(f'Нужно чисел: {len(finish_sequence)}\nCписок этих чисел: {finish_sequence}')

# print('17.4 - Задача 1. Анализ цен')
# Нашему другу заказали написать программу, которая анализирует цены на бирже. Она получает этот пакет данных, но делать что-либо с ним нельзя. Для нормальной работы аналитической программы берётся новый список, который равен тому, что пришло. Затем идёт работа с новым списком: если есть отрицательные цены, то программа их зануляет и в конце выводит на экран, сколько денег мы по итогу потеряли. Получился вот такой код:
# Однако при таких входных данных программа почему-то работает неправильно: она выводит ответ 0, когда правильный ответ 14. Помогите другу исправить программу, а также сделайте так, чтобы список цен генерировался случайно (диапазон можно выбрать любой)
# import random
# original_prices = [random.randint()]
# new_prices = original_prices[:]
# for i in range(len(original_prices)):
#     if new_prices[i] < 0:
#         new_prices[i] = 0
#
# print(f'Мы потеряли: {sum(original_prices) - sum(new_prices)}')

# print('17.4 - Задача 2. Срезы')
# # Дан список чисел:
# nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]
# # Напишите программу, которая выводит на экран шесть ответов:
# # Для решения используйте только срезы (и без функции len).
# print(f'{nums[:5]}')  # В первой строке выведите первые пять элементов списка.
# print(f'{nums[:-2]}')  # Во второй строке выведите весь список, кроме последних двух элементов.
# print(f'{nums[::2]}')  # В третьей строке выведите все элементы с чётными индексами.
# print(f'{nums[1::2]}')  # В четвёртой строке выведите все элементы с нечётными индексами.
# print(f'{nums[::-1]}')  # В пятой строке выведите все элементы в обратном порядке.
# print(f'{nums[::-2]}')  # В шестой строке выведите все элементы списка через один в обратном порядке, начиная с последнего.

# print('17.4 - Задача 3. Удаление части')
# # Дан список из N чисел, а также числа А и В (можно сгенерировать случайно, при этом А < B). Напишите программу, которая удаляет элементы списка с индексами от А до В. Не используйте дополнительные переменные и методы списков.
# import random
# long = int(input('Введите длину списка: '))
# first_number = int(input('Введите число А: '))
# second_number = int(input('Введите число B: '))
# if first_number < second_number:
#     nums = [random.randint(-10, 10) for _ in range(long)]
# else:
#     print('Число А должно быть меньше числа В')
#     first_number = int(input('Введите число А заново: '))
#     second_number = int(input('Введите число B заново: '))
# first_number = random.randint(0, len(nums) - 2)
# second_number = random.randint(first_number + 1, len(nums) -1)
#
# print(f'Получаем список : {nums}')
# print(f'Убираем числа с индексом от {first_number} до {second_number}\nРезультат: {nums[:first_number] + nums[second_number + 1:]}')

# print('17.5 Строки: индексы и срезы')
word = 'Привет'
#
# first_part = word[:len(word) // 2]
# print(first_part[::-1])
#
# second_part = word[:len(word) // 2:]
# print(second_part[::-1])
#
# print(first_part[::-1] + second_part[::-1])
print(word[1:])
print(word[:10])
print(word[1:5])

print(word[::-1])


********************************************************************************

# user_name = input('Введите имя пользователя: ')
# file_name = input('Введите имя файла: ')
#
# path = 'C:/Users/{mpore}/{AMD_RyzenMaster}.log'.format(
#     mpore=user_name,
#     AMD_RyzenMaster=file_name
# )
#
# path_2 = 'C:/Users/{0}/{0}/{1}.log'.format(
#     user_name,
#     file_name
# )
#
# path_3 = f'C:/Users/{user_name}/{user_name}/{file_name}.log'
#
# print(f'Путь к файлу{path}')

# while True:
#     grats_tamplate = input('Введите шаблон поздравления, '
#                            'в шаблоне необходимо использовать конструкцию {name}: ')
#     if '{name}' in grats_tamplate:
#         break
#     print('Ошибка: отсутствует конструкция {name}')
#
# print('Введите список имен (Заканчивается на end): ')
# names_list = []
# while True:
#     name = input('Имя: ')
#     if name != 'end':
#         names_list.append(name)
#     else:
#         break
#
# for i_name in names_list:
#     print(grats_tamplate.format(name=i_name))

# print('Задача 1. Заказ')
# После того, как человек сделал заказ в интернет-магазине, ему на почту приходит оповещение с его именем и номером заказа.
# Напишите программу, которая получает на вход имя и код заказа, а затем выводит на экран соответствующее сообщение. Для решения используйте строковый метод format.
# name_input = input('Имя: ')
# number_order = input('Номер заказа: ')
# output_text = 'Здравствуйте, {0}! Ваш номер заказа: {1}. Приятного дня!'.format(
#     name_input,
#     number_order
# )
# print(output_text)
# print(f'Здравствуйте, {name_input}! Ваш номер заказа: {number_order}. Приятного дня!')

# print('Задача 2. Долги')
# Один наш друг занял у нас определённую сумму денег и всё никак не может их вернуть. А деньги нам нужны. Поэтому мы решили написать небольшой скрипт-напоминалку, который, возможно, разбудит его совесть.
# Напишите программу, которая получает на вход имя и долг, а затем выводит на экран сообщение, где имя повторяется несколько раз (и долг, возможно, тоже). Используйте числа в названиях ключей
# name = input('Введите имя: ')
# debt = input('Введите сумму долга: ')
# text = '{0}! {0}, привет! Как дела, {0}? Где мои {1} рублей? {0}!?'.format(name, debt)
# print(text)

# print('Задача 3. IP-адрес')
# IP-адрес компьютера состоит из 4 чисел, разделённых точкой. Каждое число находится в диапазоне от 0 до 255 (включительно).
# Пример правильного адреса: 192.168.1.0
# Пример неправильного адреса: 192.168.300.0
# Напишите программу, которая получает на вход 4 числа и выводит на экран IP-адрес. Используйте переменную ip_address в качестве шаблона. Обеспечьте контроль ввода.

# ip_address = "{0}.{1}.{2}.{3}"
# count = 0
# numbers = []
# while count < 4:
#     new_number = int(input("Введите число: "))
#     if 0 <= new_number <= 255:
#         numbers.append(new_number)
#         count += 1
#
# print(ip_address.format(*numbers))
# print(ip_address.format(numbers[0], numbers[1], numbers[2], numbers[3]))

# text = input('содержимое файла: ')
# words_list = text.split()
#
# print(words_list)
#
# new_text = '---'.join(words_list)
# print(new_text)

# while True:
#     grats_tamplate = input('Введите шаблон поздравления, '
#                            'в шаблоне необходимо использовать конструкцию '
#                            '{name} и {age}: ')
#     if '{name}' in grats_tamplate and '{age}' in grats_tamplate:
#         break
#     print('Ошибка: отсутствует одна или две конструкции')
#
# names_list = input('Список людей через запятую: ').split(', ')
# ages_str = input('Возраст людей через пробел')
# ages = [int(i_number) for i_number in ages_str.split()]
#
# for i_man in range(len(names_list)):
#     print(grats_tamplate.format(name=names_list[i_man], age=ages[i_man]))
#
# people = [
#     ' '.join([names_list[i_man], str(ages[i_man])])
#     for i_man in range(len(names_list))
# ]
# people_str = ', '.join(people)
# print(f'\n Именинники {people_str}')

# print('Задача 1. Улучшенная лингвистика 2')
# Усовершенствуйте старую программу:
# У нас есть список из трёх слов, которые вводит пользователь. Затем вводится сам текст произведения,
# который вводится уже в одну строку. Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте.
#
# words = [input("Введите слово: ") for _ in range(3)]
# text = input("Введите текст: ")
# words_count = [text.count(word) for word in words]
# print(f'{words_count}')

# print('Задача 2. Бабушка')
# У одной бабушки, когда та переписывается с внуком, постоянно залипает кнопка пробела.
# В итоге между словами получаются огромные расстояния.
# Внук не знает как это поправить в самом телефоне, поэтому обратился к вам за помощью.
# Пользователь вводит строку. Напишите программу, которая преобразовывает
# в этой строке все идущие подряд пробелы в один и выводит результат на экран.
# Пример:
# Введите текст: У       нас         пошёл                    снег    !
# Исправленный текст: У нас пошёл снег !
# text = input("Введите текст: ")
# print(" ".join(text.split()))

# print('Задача 3. Разделители символов')
# Человек хочет сделать рассылку поздравлений для определённого списка людей. Поздравления для разных людей он хочет написать по-разному.
#
# Напишите программу, которая запрашивает у пользователя:
# Шаблон поздравления (туда вставляется ФИ и возраст)
# ФИ людей (в одну строку, разделяются запятой)
# Возраст каждого человека (в одну строку через пробел)
# В конце  программа выводит поздравления и всех именинников в одну строку вместе с их возрастом.
# Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: С днём рождения, {name}! С {age}-летием тебя!
# Список людей через запятую: Иван Иванов, Петя Петров, Лена Ленова
#
# Возраст людей через пробел: 20 30 18
# С днём рождения, Иван Иванов! С 20-летием тебя!
# С днём рождения, Петя Петров! С 30-летием тебя!
# С днём рождения, Лена Ленова! С 18-летием тебя!
# Именинники: Иван Иванов 20, Петя Петров 30, Лена Ленова 18

# while True:
#     grats_template = input("Введите шаблон поздравления, "
#                            "в шаблоне можно использовать конструкцию {name} и {age}: "
#                            "С днём рождения, {name}! С {age}-летием тебя! ")
#     if "{name}" in grats_template and "{age}" in grats_template:
#         break
#     print("Ошибка! Отсутствует одна или несколько конструкций!")
#
# names_list = input("Введите список людей через запятую: ").split(",")
# # если ввод только через запятую то пробел не добавялем, если с пробелом то - .split(", ")
# ages_str = input("Введите возраст людей через пробел: ")
# ages = [int(age) for age in ages_str.split()]
#
# for index, name in enumerate(names_list):
#     print(grats_template.format(name=name, age=ages[index]))

# # Вариант с небольшой долей "магии" (инструмент будет изучен в будущих модулях):
# for age, name in zip(ages, names_list):  # zip соединяет списки и можно брать сразу по элементу из каждого
#     print(grats_template.format(name=name, age=age))

# people = [" ".join([names_list[index], str(ages[index])]) for index in range(len(names_list))]
# print("Именинники:", ", ".join(people))

# user_name = input('Введите имя пользователя: ')
# file_name = input('Введите имя файла: ')
#
# path = 'C:/Users/{user}/{new_file}'.format(
#     user=user_name,
#     new_file=file_name
# )
#
# if not path.endswith('.txt'):
#     print('Ошибка: не верное расширение файла')
# elif not path.startswith('C:/'):
#     print('Ошибка: неверно указан диск')
# else:
#     print(f'Путь к файлу: {path}')

# words_list = []
#
# for i_num in range(1, 4):
#     # word = input(f'Введите {i_num} слово: ').lower()
#     word = input(f'Введите {i_num} слово: ').upper()
#
#     words_list.append(word)
#
# # text = input('Введите текст: ').lower().split()
# text = input('Введите текст: ').upper().split()
#
#
# print(f'Подсчет слов в тексте: ')
# for index in range(3):
#     print(f'{words_list[index]} : {text.count(words_list[index])}')

# print('Задача 1. Шифр Цезаря 2')
# Мы уже писали программу, которая шифрует строку с помощью шифра Цезаря. Напомним, что в таком способе шифрования каждая буква заменяется на следующую по алфавиту через K позиций по кругу.
# Напишите (модифицируйте) программу, которая реализует этот алгоритм шифрования. Не используйте конкатенацию и сделайте так, чтобы текст был в одном регистре.

# print(ord("а"), ord("я"), ord("ё"), chr(1104))
#
# text = input("Введите текст: ")
# delta = int(input("Введите сдвиг: "))
# alphabet = [chr(index) for index in range(ord("а"), ord("я") + 1)]  # заполняем список буквами алфавита
# # Думаем над структурой алгоритма: [вариант_1 если условие_1 иначе вариант_2 for буква in текст]
# new_text = [alphabet[(alphabet.index(letter) + delta) % len(alphabet)] if letter in alphabet else letter for letter in text.lower()]
# print(''.join(new_text))

# print('Задача 2. Путь к файлу')
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта часто используются абсолютные пути файлов, которые необходимо проверять.
# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные: диск и расширение файла. Напишите программу, которая проверяет корректность этого пути.
#
# user_name = input('Введите имя пользователя: ')
# file_name = input('Введите имя файла: ')
#
# path = 'C:/Users/{user}/{new_file}'.format(
#     user=user_name,
#     new_file=file_name
# )
#
# if not path.endswith('.txt'):
#     print('Ошибка: не верное расширение файла')
# elif not path.startswith('C:/'):
#     print('Ошибка: неверно указан диск')
# else:
#     print(f'Путь к файлу: {path}')

# print('Задача 3. Удаление части')
# На вход в программу подаётся строка, состоящая из прописных и заглавных букв кириллицы. Напишите код, который проверяет, каких букв в строке больше, прописных или заглавных. Если заглавных букв больше, то сделать все буквы строки заглавными, иначе сделать все прописными.
# Подсказка: используйте методы islower() и/или isupper().

# input_text = input('Введите строку: ')
# if input_text.islower():
#     print(input_text.upper())
# else:
#     print(input_text.lower())

# text = input("Введите текст: ")
# lowers = len([letter for letter in text if letter.islower()])
# uppers = len([letter for letter in text if letter.isupper()])
#
# if lowers > uppers:
#     print("Результат:", text.lower())
# else:
#     print("Результат:", text.upper())


# details_num = 500000000
# price = 23.34523466
# increase = 0.045636
#
# print('На складе {:,d} деталей'.format(details_num))
# print('Каждая деталь стоит {:.2f} рублей'.format(price))
# print('Цена увеличилась на {:.1%}'.format(increase))
# print('На складе {:.0e} деталей'.format(details_num))




********************************************************************************

import random
# phonebook_dict = {
#     'Ваня': 88006664545,
#     'Петя': 88003332233,
#     'Оля': 89993223322
#                 }
# name = input('Введите имя: ').title()
# if name in phonebook_dict:
#     print(phonebook_dict[name])
# else:
#     print('Ошибка: человек с именем {0} не найден'.format(name))



# print('Задача 1. Словарь квадратов чисел')
# На вход программе поступает целое число num. Напишите программу создания словаря, который включает в себя ключи от 1 до num, а значениями соответствующего ключа будет значение ключа в квадрате.
# num = int(input('Введите целое число: ')
# num = 5
# cubes_dict = dict()
# for nums in range(1, num + 1):
#     cubes_dict[nums] = nums ** 2
#
# print(cubes_dict)
#
# print('Задача 2. Студент')
# Пользователь вводит фамилию, имя студента, город проживания, вуз, в котором он учится, и все его оценки. Всё вводится в одну строку через пробел. Напишите программу, которая по этой информации составит словарь и выведет его на экран.

# student_str = input(
#     'Введите информацию о студенте через пробел\n'
#     '(имя, фамилия, город, место учебы, оценки): '
#
# )
# student_info = student_str.split()
# student = dict()
# student['Имя'] = student_info[0]
# student['Фамилия'] = student_info[1]
# student['Город'] = student_info[2]
# student['Место учебы'] = student_info[3]
# student['Оценки'] = []
# for index_grade in student_info[4:]:
#     student['Оценки'].append(int(index_grade))
#
# for index_info in student:
#     print(f'{index_info} - {student[index_info]}')


# print('Задача 3. Контакты')
# Энтузиаст Степан, купив новый телефон, решил написать для него свою собственную операционную систему. И, конечно же, первое, что он захотел в ней реализовать, — это телефонная книга.
# Напишите программу, которая запрашивает у пользователя имя контакта и номер телефона, добавляет их в словарь и выводит на экран текущий словарь контактов. Запрос на добавление идёт бесконечно (но можно задать своё условие для завершения программы). Обеспечьте контроль ввода: если это имя уже есть в словаре, то выведите соответствующее сообщение.

# phonebook = dict()
# while True:
#     print(f'Текущие контакты на телефоне: ')
#     if phonebook:
#         for name in phonebook:
#             print(f'{name, phonebook[name]}')
#     else:
#         print('<Пусто>')
#     name = input('Введите имя: ')
#     number_phone = int(input('Введите номер телефона: '))
#     if name in phonebook:
#         print('Ошибка: такое имя уже существует.')
#     else:
#         phonebook[name] = number_phone
#

# phonebook_sim_1 = {
#     'Ivan': 100,
#     'Ruban': 200,
#     'Karuban': 300
#
# }
#
# phonebook_sim_2 = {
#     'Uran': 2222,
#     'Buran': 3333,
#     'Ruban': 4444
# }
#
# phonebook_sim_1.update(phonebook_sim_2)
# print(phonebook_sim_1)
#
# phonebook_sim_1['Agrentum'] = phonebook_sim_1.pop('Uran')
# print(phonebook_sim_1)
#
# print(phonebook_sim_1.get('Mulan'))

# print('Задача 1. Склады')
# У мебельного магазина есть два склада, на которых хранятся разные категории товаров по парам «название — количество»:
#
# small_storage = {
#     'гвозди': 5000,
#     'шурупы': 3040,
#     'саморезы': 2000
# }
#
# big_storage = {
#     'доски': 1000,
#     'балки': 150,
#     'рейки': 600
# }
# big_storage.update(small_storage)
# search_value = input('Введите товар: ').lower()
# if search_value in big_storage:
#     print(f'Найдено: {search_value} - {big_storage.get(search_value)} штук')
# else:
#     print('Товар не найден')

# print('Задача 2. Кризис фруктов')
# Мы работаем в одной небольшой торговой компании, где все данные о продажах фруктов за год сохранены в словаре в виде пар «название фрукта — доход»:
# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'grapefruit': 300.40,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
#
# }
# summ = 0
# min_price = None
# min_name = ''
# for name, value in incomes.items():
#     if min_price is None or min_price > value:
#         min_price = value
#         min_name = name
#     summ += value
#
# incomes.pop(min_name)
# print(f'Общий доход за год составил: {summ}')
# print(f'Самый маленький доход у {min_name}. Он составляет {min_price} рублей')
# print(f'Итоговый словарь: {incomes}')

# def get_value(x):
    # return x[1]


# result_sum = sum(incomes.values())
# min_name, min_value = min(incomes.items(), key=get_value)
# При помощи функции и параметра key мы говорим пайтону как именно надо сравнивать между собой элементы
# Т.к. элементы записаны в таком виде - ('apple': 5600.20), а сравнивать мы хотим по значениям - то нам проосто надо брать для сравнения
# элементы под индексом 1 (если бы сравнивали по ключам, то индекс надо было бы заменить на 0)
# print(result_sum, min_name, min_value)

# print('Задача 3. Гистограмма частоты')
# Лингвистам нужно собрать данные о частоте букв в тексте, исходя из этих данных будет строиться гистограмма частоты букв.
# Напишите программу, которая получает сам текст и считает, сколько раз в строке встречается каждый символ. На экран нужно вывести содержимое в виде таблицы, отсортированное по алфавиту, а также максимальное значение частоты.
#
#
# def histogram(string):
#     sym_dict = dict()
#     for sym in string:
#         if sym in sym_dict:
#             sym_dict[sym] += 1
#         else:
#             sym_dict[sym] = 1
#
#     return sym_dict
#
#
# text = input('Введите текст: ').lower()
# hist = histogram(text)
# for index_sym in sorted(hist.keys()):
#     print(f'{index_sym} : {hist[index_sym]}')
#
# print(f'Максимальная частота: {max(hist.values())}')

#
# data = dict()
# print(data.get('server'))
# data['server'] = {
#     'host': '127.0.0.1',
#     'port': '10'
# }
# if data.get('configuration', {}).get('ssh', {}).get('login', {}):
#     print('В структуре уже есть логин')
#
# data['configuration'] = {
#     'ssh': {
#         'access': 'true',
#         'login': 'Ivan',
#         'password': 'qwerty'
#     }
# }
#
# print(data)
# print(data['server']['port'])
# data['configuration']['ssh']['login'] = 'Vladimir'
# print(data['configuration']['ssh']['login'])
# print()
# for index_value in data.values():
#     for index_key in index_value:
#         print(index_key, index_value[index_key])
#


# print('Задача 1. Член семьи')
# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):
# Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети. Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob. Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.
# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }
#
# childrens_dict = {}
# for child in family_member["children"]:
#     childrens_dict[child["name"]] = child["age"]
#
# search_bob = childrens_dict.get("Bob", None)
# if search_bob:
#     print("Bob найден")
# else:
#     print("Bob-а нету!")
#
# childrens_surname = family_member.get("surname", None)
# if childrens_surname:
#     print(childrens_surname)
# else:
#     print("Nosurname")

# print('Задача 2. Игроки')
# Есть готовый словарь игроков, у каждого игрока есть имя, команда, в которой он играет, а также его текущий статус, в котором указано, отдыхает он, тренируется или путешествует:
# Напишите программу, которая выводит на экран вот такие данные в разных строчках:
#
# Все члены команды из команды А, которые отдыхают.
# Все члены команды из группы B, которые тренируются.
# Все члены команды из команды C, которые путешествуют.

# players_dict = {
#     1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
#     2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
#     3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
#     4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
#     5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
#     6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
#     7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
#     8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
# }
# team_a_members = [
#     player['name']
#     for player in players_dict.values()
#     if player['team'] == 'A' and player['status'] == 'Rest'
# ]
# team_b_members = [
#     player['name']
#     for player in players_dict.values()
#     if player['team'] == 'B' and player['status'] == 'Training'
# ]
#
# team_c_members = [
#     player['name']
#     for player in players_dict.values()
#     if player['team'] == 'C' and player['status'] == 'Travel'
# ]
#
# print(team_a_members)
# print(team_b_members)
# print(team_c_members)

# import random
# numbers_list = [random.randint(1, 4) for index in range(10)]
# qnique = set(numbers_list)
# print(qnique)

# print('Задача 1. Пунктуация')
# Напишите программу, которая считает количество знаков пунктуации в символьной строке. К знакам пунктуации относятся символы из набора ".,;:!?". Набор должен храниться в виде множества.
# user_input = input("Введите строку: ")
# user_input = 'Я! Есть. Грут?! Я, Грут и Есть.'
# symbols = set(".,;:!?")
# count = 0
# for elem in user_input:
#     if elem in symbols:
#         count += 1
# print("Количество знаков пунктуации:", count)
# print('Задача 2. Семинар')
# nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
# nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]
# nums_set_1 = set(nums_1)
# nums_set_2 = set(nums_2)
# print(f'1-е множество: {nums_set_1}')
# print(f'2-е множество: {nums_set_2}')
# print(f'Минимальный элемент 1-го множества: {min(nums_set_1)}')
# print(f'Минимальный элемент 2-го множества: {min(nums_set_2)}')
# nums_set_1.discard(min(nums_set_1))
# nums_set_2.discard(min(nums_set_2))
# rand_num_1 = random.randint(100, 200)
# rand_num_2 = random.randint(100, 200)
# nums_set_1.add(rand_num_1)
# nums_set_2.add(rand_num_2)
# print(f'Случайное число для 1-го множества: {rand_num_1}')
# print(f'Случайное число для 2-го множества: {rand_num_2}')
# print(f'Объединение множеств: {nums_set_1 | nums_set_2}')
# print(f'Пересечение множеств: {nums_set_1 & nums_set_2}')
# print('Задача 3. Различные цифры')
#
# # text = input('Введите текст: ')
# text = 'ab1n32kz2'
# text_set = set(text)
# result = text_set & set("0123456789")
# print(''.join(result))

data = [
    {'id': 10, 'user': 'Bob'},
    {'id': 11, 'user': 'Misha'},
    {'id': 12, 'user': 'Anton'},
    {'id': 10, 'user': 'Bob'},
    {'id': 11, 'user': 'Misha'},
]
unique_data = []
for index_dict in data:
    data_exists = False
    for unique_dict in unique_data:
        if unique_dict['id'] == index_dict['id']:
            data_exists = True
            break
    if not data_exists:
        unique_data.append(index_dict)

print(unique_data, '\n')

unique_data_dict = {index_dict['id']: index_dict for index_dict in data}
print(unique_data_dict.values())


********************************************************************************

import random
import math
import string
# tuple
# Задача 1. Создание кортежей
# Заполните, один кортеж десятью случайными целыми числами от 0 до 5 включительно.
# Также заполните второй кортеж числами от −5 до 0. Объедините два кортежа, создав тем самым третий кортеж. С помощью
# метода кортежа определите в нём количество нулей. Выведите на экран третий кортеж и количество нулей в нём.
first_tuple = tuple(random.randint(0, 5) for number in range(10))
second_tuple = tuple(random.randint(-5, 0) for number in range(10))
triple_tuple = tuple(list(first_tuple + second_tuple))
print(f'Результат: {triple_tuple}, кол-во 0 в кортеже: {triple_tuple.count(0)}')

# Задача 2. Цилиндр
# Андрей однажды уже писал функции для расчёта площади сферы и объёма шара. И теперь для своей
# курсовой работы ему пришлось связаться с цилиндрами. Пользователь вводит два значения: радиус и высоту. Напишите
# функцию для расчёта площади боковой поверхности цилиндра и его полной площади. Функция должна возвращать два эти
# значения. После этого в основной программе выводятся оба ответа в две строки. Площадь боковой поверхности (r —
# радиус, h — высота): Полная площадь (S — площадь круга):


def f_cylinder(radius, heigth):
    side = 2 * math.pi * radius * heigth
    full = side + 2 * (2 * math.pi * radius)
    return side, full


# radius = int(input('Введите радиус: '))
# heigth = int(input('Введите высоту: '))
print(f_cylinder(2, 1))

# Задача 3.  Неправильный код
# Дан код, в котором должно происходить следующее: изначально есть кортеж из пяти чисел.
# Затем вызывается функция, которая получает на вход кортеж чисел, генерирует случайный индекс и случайное значение,
# а затем по этим индексу и значению меняет сам кортеж. Функция должна возвращать кортеж и случайное значение. В
# основном коде функция используется два раза, и на экран два раза выводится новый кортеж и случайное значение.
# Причём второй раз выводится сумма первого случайного значения и второго. Однако код, который вам дали,
# оказался нерабочим. Исправьте его в соответствии с описанием.


def change(nums):
    index = random.randint(0, 5) % len(nums)
    value = random.randint(100, 1000)
    nums = list(nums)
    nums[index] = value
    return tuple(nums), value


my_nums = (1, 2, 3, 4, 5)
new_nums, rand_val = change(my_nums)
print(new_nums, rand_val)
new_nums_second, rand_val_second = change(new_nums)
rand_val += rand_val_second
print(new_nums_second, rand_val)

# Enumarate
# Задача 1. Саботаж! Какой-то нехороший человек решил подпортить жизнь frontend-разработчикам и добавил в
# код сайта символ ~ (тильда). Но программисты быстро решили эту проблему, пройдясь по всему коду маленькой программой.
# Пользователь вводит строку. Напишите программу, которая проходит по строке и выводит в консоль индексы символа ~.
# Для решения этой задачи (и остальных тоже) используйте функцию enumerate.


def sabotage(string):
    result = [index for index, value in enumerate(string) if value == '~']

    return tuple(result)


# text = input('Строка: ')

print(sabotage('so~mec~od~e'))

# Задача 2. Словари из списков
# Создайте два списка, в каждом из которых лежит 10 случайных букв алфавита (могут
# повторяться). Затем для каждого списка создайте словарь из пар «индекс — значение» и выведите оба словаря на экран.
first_list = [random.choice(string.ascii_letters) for letter in range(10)]
second_list = [random.choice(string.ascii_letters) for letter in range(10)]
first_dict = {index: value for index, value in enumerate(first_list)}
second_dict = {index: value for index, value in enumerate(second_list)}
print(f'Первый словарь: {first_dict}\nВторой словарь: {second_dict}')

# Задача 3. Универсальная программа Один заказчик попросил нас написать небольшой скрипт для своих криптографических
# нужд. При этом он заранее предупредил, что скрипт должен уметь работать с любым итерируемым типом данных.
# Напишите функцию, которая возвращает список из элементов итерируемого объекта (кортежа, строки, списка, словаря),
# у которых индекс чётный


def even_value(string):
    list_text = list(string)
    result_list = [value for index, value in enumerate(list_text) if index % 2 == 0]

    return result_list

# text = input('Допустим, есть такая строка: ')

# print(even_value(text))
# print(even_value('О Дивный Новый мир!'))
print(even_value([100, 200, 300, 'буква', 0, 2, 'а']))

# Задача 1. Паспортные данные В базе данных поликлиники хранятся паспортные данные людей. Хранение реализовано с
# помощью словаря, состоящего из пар «Серия и номер паспорта — фамилия и имя». Серия и номер — составной ключ,
# а фамилия и имя — составное значение.
# Реализуйте функцию, которая по номеру и серии паспорта выдаёт имя и фамилию человека.


def search_in_dict(string):
    string_list = [int(index) for index in string.split()]
    tuple_string = tuple(string_list)
    for key, value in data.items():
        if key == tuple_string:
            return print(f'По запросу: {tuple_string}\nНайдено: {value}')
        else:
            return print(f'По запросу: {tuple_string}\nНичего не найдено')

data = {
    (5000, 123456): ('Иванов', 'Василий'),
    (6000, 111111): ('Иванов', 'Петр'),
    (7000, 222222): ('Медведев', 'Алексей'),
    (8000, 333333): ('Алексеев', 'Георгий'),
    (9000, 444444): ('Георгиева', 'Мария')
}

search_value = input('Введите серию и номер через пробел: ')
print(search_in_dict(search_value))

# Задача 2. Контакты 2 Мы уже реализовывали телефонную книгу для Степана, однако её проблема была в том,
# что туда нельзя было добавить людей с одинаковыми именами. Надо это исправить. Напишите программу,
# которая запрашивает у пользователя имя контакта, фамилию и номер телефона, добавляет их в словарь и выводит на
# экран текущий словарь контактов. Словарь состоит из пар «Ф. И. — телефон», где Ф. И. — это составной ключ. Запрос
# на добавление идёт бесконечно (но можно задать своё условие для завершения программы). Обеспечьте контроль ввода:
# если этот человек уже есть в словаре, то выведите соответствующее сообщение.

# phonebook = {}
# while True:
#     text = input('Введите фамилию и имя через пробел:').split()
#     name_surname = tuple(text)
#     if name_surname not in phonebook:
#         phonebook[name_surname] = int(input('Введите номер телефона: '))
#     else:
#         print(f'Контакт {name_surname} уже есть')
#     print(f'{phonebook}')

#zip

names = ['Tom', 'Bob', 'Albert']
ages = [20, 45, 70]
# people = list(zip(names, ages))
people = dict(zip(names, ages))
print(people)
# for index in people:
#     print(index)
people_2 = {index: age + 10 for index, age in zip(names, ages)}
print(people_2)


def input_user_score():
    count_records = int(input('Сколько записей вносится в протокол? '))
    dict_records = dict()
    print('Записи (результат и имя):')
    for number in range(1, count_records + 1):
        user_score = input(f'{number}-ая запись: ').split()
        dict_records[number] = {}
        dict_records[number]['name'] = user_score[1]
        dict_records[number]['score'] = int(user_score[0])
    return dict_records


def result(records):
    winner_rank = dict()
    list_records = [[record.get('score', 0), record.get('name', 0)] for index, record in records.items()]
    max_value = max(list_records)
    winner_rank['First place'] = [max_value[1], max_value[0]]
    for index, values in records.items():
        if max_value[0] > values.get('score') and index < len(records.keys()):
            winner_rank['Second place'] = [values.get('name'), values.get('score')]
    for index, values in records.items():
        if values.get('score') <= winner_rank['Second place'][1] \
                and index < len(records.keys()) \
                and values.get('name') != winner_rank['Second place'][0]:
            winner_rank['Third place'] = [values.get('name'), values.get('score')]
    return winner_rank


def output_winner(list_rank):
    # [print(f'{index, value}') for index, value in list_rank.items()]
    return print(f'{list_rank}')


# dict_records = {
#     1: ('69485', 'Jack'),
#     2: ('95715', 'qwerty'),
#     3: ('95715', 'Alex'),
#     4: ('83647', 'M'),
#     5: ('197128', 'qwerty'),
#     6: ('95715', 'Jack'),
#     7: ('93289', 'Alex'),
#     8: ('95715', 'Alex'),
#     9: ('95715', 'M')
# }


# dict_records = {
#     1: {'name': 'Jack', 'score': 69485},
#     2: {'name': 'qwerty', 'score': 95715},
#     3: {'name': 'Alex', 'score': 95715},
#     4: {'name': 'M', 'score': 83647},
#     5: {'name': 'qwerty', 'score': 197128},
#     6: {'name': 'Jack', 'score': 95715},
#     7: {'name': 'Alex', 'score': 93289},
#     8: {'name': 'Alex', 'score': 95715},
#     9: {'name': 'M', 'score': 95715}
# }


# user_score = input_user_score()
list_winner_rank = result(dict_records)
output_winner(list_winner_rank)

********************************************************************************

import random
import copy
## home work
# def shortest_seq_range(string, tpl):
#     return min(len(string), len(tpl))
#
#
# syms_str = 'abcd'
# nums_tpl = (10, 20, 30, 40)
#
# pairs = ((syms_str[i_elem], nums_tpl[i_elem]) for i_elem in range(shortest_seq_range(syms_str, nums_tpl)))
# print(f'{pairs}')
# def factorial(num):
#     if num == 1:
#         return 1
#     fact_m_minus_1 = factorial(num - 1)
#     return num * fact_m_minus_1
#
#
# num_fuct = factorial(5)
# print(num_fuct)
#
#
# def fibonacci(n):
#     """ Returns Fibonacci Number at nth position using recursion"""
#     if n == 0:
#         return 0
#     elif n == 1:
#         return 1
#     else:
#         return fibonacci(n - 1) + fibonacci(n - 2)
#
#
# for i in range(10):
#     print(fibonacci(i), end=" ")

# Источник: https://pythononline.ru/osnovy/rekursii-python

# site = {
#     'html': {
#         'head': {
#             'title': 'Мой сайт'
#         },
#         'body': {
#             'h2': 'Здесь будет мой заголовок',
#             'div': 'Тут, наверное, какой то блок',
#             'p': 'А вот тут новый абзац'
#         }
#     }
# }
#
#
# def find_key(struct, key):
#     if key in struct:
#         return struct[key]
#
#     for sub_struct in struct.values():
#         if isinstance(sub_struct, dict):
#             result = find_key(sub_struct, key)
#             if result:
#                 break
#     else:
#         result = None
#
#     return result
#
#
# user_key = input('Какой ключ ищем?: ')
# value = find_key(site, user_key)
# if value:
#     print(value)
# else:
#     print('Такого ключа в структуре сайта нет')

# Задача 1. Challenge Обычно программисты любят, когда всё просто и понятно. Но Антон не из таких. Он любит
# устраивать себе челлендж, развиваться и сразу применять на практике то, что только что узнал. И в этот раз он
# подумал реализовать подсчёт факториала без использования циклов. Напишите функцию, которая считает факториал числа
# с помощью рекурсии. Кстати, в Python есть ограничение на количество рекурсивных вызовов. Попробуйте передать своей
# функции, например, число 1000 и посмотрите, что будет.

# def factorial(num):
#     if num == 1:
#         return 1
#     fact_m_minus_1 = factorial(num - 1)
#     return num * fact_m_minus_1
#
#
# num_fuct = factorial(995)
# print(num_fuct)


# Задача 2. Степень числа На одном из форумов, посвящённых программированию, пользователь выложил такой код для
# расчёта степени числа без использования циклов, ** и функции math.pow(): Другие пользователи отметили,
# что это решение нерабочее и в нём есть ошибки. Исправьте это решение, не используя циклы, возведение в степень
# через ** и функцию math.pow()
# Правильный результат:
# Введите вещественное число: 1.5
# Введите степень числа: 5
# 1.5 ** 5 = 7.59375


# def power(a, n):
#     if n == 1:
#         return a
#     else:
#         return a * power(a, n - 1)
#
#
# float_num = float(input('Введите вещественное число: '))
# int_num = int(input('Введите степень числа: '))
#
# print(f'{float_num} ** {int_num} = {power(float_num, int_num)}')


# Задача 3. Поиск элемента Когда мы работаем с большой многоуровневой структурой, нам нередко необходимо пройтись по
# ней и найти нужный элемент. Для этого в программировании используются специальные алгоритмы поиска.
# Напишите функцию, которая находит заданный пользователем ключ в словаре и выдаёт значение этого ключа на экран. В
# качестве примера можно использовать такой словарь:


# def search_element(data, tag):
#     result = None
#     if tag in data:
#         return data[tag]
#     for key, value in data.items():
#         if isinstance(value, dict):
#             result = search_element(value, tag)
#             if result:
#                 return result
#     return result

#
# site = {
#     'html': {
#         'head': {
#             'title': 'Мой сайт "TITLE"'
#         },
#         'body': {
#             'h2': 'Здесь будет мой заголовок "H2"',
#             'div': 'Тут, наверное, какой то блок "DIV"',
#             'p': 'А вот тут новый абзац "P"'
#         }
#     }
# }
#
#
# search_key = input('Введите искомое значение: ')
# return_value = search_element(site, search_key)
# if return_value:
#     print(f'Найдено значение: {return_value}')
# else:
#     print(f'Значение подходящих с {search_key} не найдено.')
# def foo(x):
#     if x == 0:
#         print("Вызов foo(0) возвращает 0")
#         return 0
#     else:
#         print(f"Вызов foo({x - 1}) начинается и добавляется в стек")
#         new_result = foo(x - 1)
#         print(f"Вызов foo({x - 1}) завершился и удаляется из стека")
#         result = x + new_result
#         return result
#
#
# print(f"Вызов foo(2) начинается и добавляется в стек")
# result = foo(2)
# print(f"Вызов foo(2) завершается и удаляется из стека")
# print("Итоговый ответ — ", result)


# def sum_test(x, y):
#     return x + y
#
#
# def test_return(a, b, c):
#     new_summ = sum_test(a, b)
#     # — вызывая эту функцию, мы хотим получить промежуточный результат; мы не хотим, чтобы наша функция завершилась;
#     result = new_summ + c
#     # получив результат вложенной функции, мы его изменяем
#     # и возвращаем
#     return result
#
#
# value = test_return(1, 2, 3)

# def try_to_change_values(some_list, num):
#     for i_index, i_val in enumerate(some_list):
#         some_list[i_index] += 10
#
#
# my_list = [1, 2, 3]
# number = 100
# try_to_change_values(my_list, number)
# print(f'{my_list, number}')

# Задача 1. Ошибка В одном проекте на 10 000 строк кода произошла критическая ошибка. Хорошо, что старший разработчик
# быстро её нашёл и исправил. Он решил проверить, смогли бы вы её исправить, если бы его не было на месте. Поэтому он
# написал для вас код с аналогичной ошибкой:

# Суть кода в том, что у вас есть общий словарь из нескольких ключей, значения которых равны ранее объявленным
# переменным. Затем вызывается функция, которая должна изменять значения словаря, добавляя к значениям случайное
# число, в зависимости от типа данных. Но при этом меняются и ранее объявленные переменные. Исправьте эту ошибку и
# убедитесь, что nums_list, some_dict и uniq_nums не меняются.


# def change_dict(dct):
#     num = random.randint(1, 100)
#     for i_key, i_value in dct.items():
#         if isinstance(i_value, list):
#             i_value.append(num)
#         if isinstance(i_value, dict):
#             i_value[num] = i_key
#         if isinstance(i_value, set):
#             i_value.add(num)
#
#
# nums_list = [1, 2, 3]
# some_dict = {1: 'text', 2: 'another text'}
# uniq_nums = {1, 2, 3}
# # common_dict = {1: nums_list, 2: some_dict, 3: uniq_nums, 4: (10, 20, 30)}
# common_dict = {1: nums_list.copy(), 2: some_dict.copy(), 3: uniq_nums.copy(), 4: (10, 20, 30)}
# # common_dict_2 = copy.deepcopy(common_dict)
# # Она будет особенно полезна в структурах, в которых множество вложенных переменных
# change_dict(common_dict)
# print(common_dict)

# Задача 2. Непонятно! Друг никак не может понять эту тему с изменяемыми и неизменяемыми типами, ссылками,
# объектами и их id. Видя, как он мучается, вы решили помочь ему и объяснить эту тему наглядно.
# Пользователь вводит любой объект. Напишите программу, которая выводит на экран тип введённых данных, информацию о
# его изменяемости, а также id этого объекта.


# def check_value(val):
#     if isinstance(input_data, str):
#         print(f'Тип данных: str (строка)\nНеизменяемый (immutable)\nId обьекта: {id(input_data)}')
#     if isinstance(input_data, int):
#         print(f'Тип данных: int (целое число)\nНеизменяемый (immutable)\nId обьекта: {id(input_data)}')
#     if isinstance(input_data, float):
#         print(f'Тип данных: float (числа с плавающей точкой)\nНеизменяемый (immutable)\nId обьекта: {id(input_data)}')
#     if isinstance(input_data, tuple):
#         print(f'Тип данных: tuple (кортеж)\nНеизменяемый (immutable)\nId обьекта: {id(input_data)}')
#     if isinstance(input_data, bool):
#         print(f'Тип данных: bool (булево значение)\nНеизменяемый (immutable)\nId обьекта: {id(input_data)}')
#     if isinstance(input_data, list):
#         print(f'Тип данных: list (список)\nИзменяемый(mutable)\nId обьекта: {id(input_data)}')
#     if isinstance(input_data, dict):
#         print(f'Тип данных: dict (словарь)\nИзменяемый(mutable)\nId обьекта: {id(input_data)}')
#     if isinstance(input_data, set):
#         print(f'Тип данных: set (множество)\nИзменяемый(mutable)\nId обьекта: {id(input_data)}')
#
#
# input_data = input('Введите данные: ')
# check_value(input_data)


# Ввод объекта осуществляется не через инпут (решение с инпутом можно реализовать, но для этого придётся прописывать
# множество проверок введенной строки, чтобы можно было преобразовать её потом в нужный тип данных)

# Добавим вспомогательные словари для работы (в них можно будет по необходимости добавлять типы, которых сейчас нет)
# data_names_dict = {
#     "<class 'str'>": "строка",
#     "<class 'dict'>": "словарь",
#     "<class 'list'>": "список",
#     "<class 'set'>": "множество"
# }
#
# mutable_check_helper = {
#     "mutable": ("словарь", "список", "множество")
# }
#
# def check_info(data):
#     type_of_data = type(data)
#     name_of_data = ""
#     if str(type_of_data) in data_names_dict:
#         name_of_data = data_names_dict[str(type_of_data)]
#
#     if name_of_data in mutable_check_helper["mutable"]:
#         property_of_data = "Изменяемый (mutable)"
#     else:
#         property_of_data = "Неизменяемый (immutable)"
#
#     print(f"Тип данных: {type_of_data} ({name_of_data})")
#     print(property_of_data)
#     print("Id объекта:", id(data))
#
#
# data_in = "привет"
# check_info(data_in)
# check_class = ['123', 123]
# print(type(check_class), isinstance(check_class, list))

# def ask_user(question,
#              complaint='Неверный ввод. Пожалуйста, введите да или нет',
#              retries=4):
#     while True:
#         answer = input(question).lower()
#         if answer == 'да':
#             return 1
#         if answer == 'нет':
#             return 0
#         retries -= 1
#         if retries == 0:
#             print('Количество попыток истекло.')
#             break
#         print(complaint)
#         print(f'Осталось попыток: {retries}')
#
#
# ask_user('Вы действительно хотите выйти? ')
# ask_user('Удалить файл?', 'Так удалить или нет?')
# ask_user('Записать файл? ', retries=2)

# Задача 1. Работа с файлом Вы пишете небольшое приложение для работы с файлами. Реализуйте функцию, которая может
# принимать на вход три аргумента: вопрос пользователю (на который нужно ответить да или нет), сообщение о
# неправильном вводе и количество попыток. Вопрос — обязательный позиционный аргумент, остальные — со значениями по
# умолчанию. При корректном ответе функция может возвращать что угодно — например, число 1 при ответе «да» или 0 при
# ответе «нет». В основной программе вызовите функцию минимум три раза: только с вопросом, с вопросом и сообщением об
# ошибке, с вопросом и количеством попыток.

# def work_at_file(question,
#                  complaint="Неверный ввод. Пожалуйста введите 'да' или 'нет'.",
#                  retries=4):
#     retry = True
#     while retry:
#         answer = input(question).lower()
#         if answer == 'да':
#             return 1
#         if answer == 'нет':
#             return 0
#         retries -= 1
#         if retries == 0:
#             retry = False
#         print(complaint)
#         print(f'Осталось попыток: {retries}')
#
#
# work_at_file('Вы действительно хотите выйти? ')
# work_at_file('Удалить файл? ', 'Так удалить или нет? ')
# work_at_file('Записать файл? ', retries=2)

# Задача 2. Накопление значений При работе со значениями по умолчанию и изменяемыми типами данных нужно знать и
# остерегаться ещё одной интересной штуки.
# Напишите функцию с двумя аргументами: первый — число num, позиционный аргумент; второй — список lst, по умолчанию
# он пустой. В теле функции в список добавляется число num и сам список выводится на экран.
# В основной программе вызовите функции три раза только с одним аргументом (числом), например так:


# def add_num(num,
#             lst=[]):
#     lst.append(num)
#     print(f'{lst}')

# И посмотрите, что произойдёт.
# После этого сделайте значение lst по умолчанию None и поправьте функцию, чтобы она работала правильно.

# def add_num(num,
#             lst=None):
#     lst = lst or []
#     # if not lst:
#     #     lst = []
#     lst.append(num)
#     print(f'{lst}')
#
#
# add_num(5)
# add_num(10)
# add_num(15)

# Задача 3. Помощь другу Нашего друга попросили написать функцию, которая на вход принимает список всякого мусора.
# Ему нужно подготовить из этого списка список словарей, чтобы его коллеги смогли дальше продолжить обработку данных.
# Вот список правил, что нужно сделать с изначальным списком: Если в списке встретился словарь, то оставляем его.
# Если в списке встретилась строка, то из неё нужно сделать словарь и положить его в итоговый список, например  “abc”
# → {“abc”: “abc”}. С числами нужно сделать то же самое, что и со строками. Всё остальное выкидываем из нашего списка.
# Друг написал программу, но в ней ошибка, так как она что-то не то выводит:( Нужна ваша помощь, вот сама программа:


# def create_dict(data, template=dict()):
#     if isinstance(data, dict):
#         return data
#     elif isinstance(data, (int, str, float)):
#         template = template or dict()
#         template[data] = data
#         return template
#     else:
#         return None
#
#
# def data_preparation(old_list):
#     new_list = []
#     for i_element in old_list:
#         new_elem = create_dict(i_element)
#         if new_elem:
#             new_list.append(new_elem)
#     return new_list
#
#
# data = ['sad', {'sds': 23}, {43}, [12, 42, 1], 2323]
# data = data_preparation(data)
# print(data)


def print_tax_document(tax, *args, **kwargs):
    price_summ = 0
    price_summ = [price_summ + i_price * tax / 100 for i_price in args]
    print(f'Сумма цен с учетом налога: {sum(price_summ)}')

    for i_info, i_value in kwargs.items():
        print('{}: {}'.format(i_info, i_value))


my_tax = int(input('Величина налога: '))
print_tax_document(my_tax, 1000, 950, 880, 920, 990,
                   year=1997, doc_type='report', operation_id=1110034)

********************************************************************************

# 9.1 Модуль os: генерация путей и метод listdir
import os
import random

# folder_name = 'project'
# file_name = 'my_file.txt'
# path = 'docs/{folder}/{file}'.format(
#     folder=folder_name,
#     file=file_name,
# )
#
# # print(path)
#
# real_path = os.path.join('docs', folder_name, file_name)
# print(real_path)
# abs_path = os.path.abspath(file_name)
# print(abs_path)
# os.path.abspath('new_folder')
# os.path.abspath(os.path.join('..', 'new_folder'))
# os.path.abspath(os.path.join('/new_folder'))ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss
# os.path.abspath(os.path.join(os.path.sep, 'new_folder'))
#
#
# def print_dirs(project):
#     print(f'\nСодержимое директории {project}')
#     for i_elem in os.listdir(project):
#         path = os.path.join(project, i_elem)
#         print(f'\t\t{path}')
#
#
# projects_list = ['pet_project', 'aqua_disco_project']
#
# for i_project in projects_list:
#     path_to_project = os.path.abspath(os.path.join(i_project))
#     print_dirs(path_to_project)
# Задача 1. Сисадмин Вы работаете системным администратором в одной компании. На диске каждого
# сотрудника компании в специальной папке access лежит файл admin.bat. Этот файл предназначен для вас, и вам нужен
# путь до этого файла, причём как относительный, так и абсолютный. Недолго думая, вы решили написать небольшой
# скрипт, который закинете по сети к этому файлу. Напишите программу, которая выводит на экран относительный и
# абсолютный пути до файла admin.bat.
# real_path = os.path.join('access', 'admin.bat')
# abs_path = os.path.abspath(real_path)
# print(f'Абсолютный путь до файла: {abs_path}\nОтносительный путь до файла: {real_path}')

# Задача 2. Содержимое Выберите любую директорию на своём диске и затем напишите программу, выводящую на экран
# абсолютные пути к файлам и папкам, которые находятся внутри этой директории.
# def print_dirs(project):
#     print(f'\nСодержимое директории {project}')
#     for i_elem in os.listdir(project):
#         path = os.path.join(project, i_elem)
#         print(f'\t\t{path}')
#
#
# projects_list = ['pet_project', 'aqua_disco_project']
#
# for i_project in projects_list:
#     path_to_project = os.path.abspath(os.path.join(i_project))
#     print_dirs(path_to_project)

# Задача 3. Корень диска Напишите программу, которая выводит на экран только корень диска, на котором запущен скрипт.
# Учтите, что скрипт может быть запущен где угодно и при любой вложенности папок.
# root_volume = os.path.abspath(os.sep)
# print("Корень диска:", os.path.abspath('.').split("\\")[0])
# print(f'\nКорень диска: {root_volume}')


# def print_dirs(project):
#     print(f'\nСодержимое директории {project}')
#     if os.path.exists(project):
#         for i_elem in os.listdir(project):
#             path = os.path.join(project, i_elem)
#             print(f'\t\t{path}')
#     else:
#         print(f'Каталога проекта {project} не существует')
#
#
# projects_list = ['my_secret_prog', 'pet_project', 'aqua_disco_project']
# for i_project in projects_list:
#     path_to_project = os.path.abspath(os.path.join(i_project))
#     print_dirs(path_to_project)

# def find_file(cur_path, file_name):
#     print(f'переходим: {cur_path}')
#
#     for i_elem in os.listdir(cur_path):
#         path = os.path.join(cur_path, i_elem)
#         print(f'\t\tсмотрим {path}')
#         if file_name == i_elem:
#             return path
#         if os.path.isdir(path):
#             print(f'{path} это директория')
#             result = find_file(path, file_name)
#             if result:
#                 break
#     else:
#         result = None
#
#     return result


# file_path = find_file(os.path.abspath(os.path.join('../../..', '..', 'backup')), 'config.sh')
# if file_path:
#     print(f'Абсолютный путь к файлу: {file_path}')
# else:
#     print('Файл не найден')
#

# Задача 1. Иконки
# Андрей для себя хочет сделать экспериментальный сайт, где будет красиво отображаться вся структура
# его диска: папки одними иконками, файлы — другими. Поэтому ему нужен код, который поможет определить,
# какой тип иконки вставить. Напишите программу, которая по заданному абсолютному пути определяет, на что указывает
# этот путь (на директорию, файл, или же путь является ссылкой), и выведите соответствующее сообщение. Если путь
# указывает на файл, то также выведите его размер (сколько он весит в байтах). Обеспечьте контроль ввода: проверка
# пути на существование.


# def find_file(cur_path, file_name):
#     print(f'переходим в: {cur_path}')
#
#     for i_elem in os.listdir(cur_path):
#         path = os.path.join(cur_path, i_elem)
#         # print(f'\t\tсмотрим в {path}')
#         if file_name == i_elem:
#             return path
#         if os.path.isdir(path):
#             print(f'{path} это директория')
#             result = find_file(path, file_name)
#             if result:
#                 break
#         if os.path.isfile(path):
#             print(f'\tэто {os.path.basename(path)} файл и его размер: {os.path.getsize(path)} байт')
#         if os.path.islink(path):
#             print(f'\t{path} это ССЫЛКА')
#     else:
#         result = None
#
#     return result
#
#
# if os.path.exists(os.path.abspath(os.path.join('..', '..', 'backup'))):
#     file_path = find_file(os.path.abspath(os.path.join('..', '..', 'backup')), 'c')
# else:
#     print('Ошибка, такой папки не существует')
#
# if file_path:
#     print(f'Абсолютный путь к файлу: {file_path}')
# else:
#     print('Файл не найден')

# path_to = input("Путь: ")
#
# if os.path.isdir(path_to):
#     print("Это папка!")
# elif os.path.isfile(path_to):
#     print("Это файл!")
#     print("Размер файла:", os.path.getsize(path_to), "байт")
# else:
#     print("Указанного пути не существует")

# Задача 2. Поиск файла
# В уроке мы написали функцию, которая ищет нужный нам файл во всех подкаталогах указанной
# директории. Однако, как мы понимаем, файлов с таким названием может быть несколько. Напишите функцию,
# которая принимает на вход абсолютный путь до директории и имя файла, проходит по всем вложенным файлам и папкам и
# выводит на экран все абсолютные пути с этим именем.


# def find_file(cur_path, file_name):
#     for i_elem in os.listdir(cur_path):
#         path = os.path.join(cur_path, i_elem)
#         if file_name == i_elem:
#             print(os.path.abspath(path))
#         elif os.path.isdir(path):
#             result = find_file(path, file_name)
#             if result:
#                 break
#     else:
#         result = None
#
#     return result
#
# find_file('..', 'test.py')

# list_members_file = open('list_members.txt', 'r', encoding='utf-8')
# input_data = list_members_file.read()
# print(input_data)
# for i_line in list_members_file:
#     print(i_line, end='')
# list_members_file.close()

# Задача 1. Результаты Одному программисту дали задачу для обработки неких результатов тестирования двух групп людей.
# Файл первой группы (group_1.txt) находится в папке task, файл второй группы (group_2.txt) — в папке
# Additional_info. На экран нужно было вывести сумму очков первой группы, затем разность очков опять же первой группы
# и напоследок — произведение очков уже второй группы. Программист оказался не очень опытным, писал код наобум и даже
# не стал его проверять. И оказалось, этот код просто не работает. Вот что он написал:

# summa, compose, diff = 0, 1, 0
# print(os.listdir())
# file = open(os.path.abspath(os.path.join('task', 'group_1.txt')), 'r', encoding='utf-8')
# file_2 = open(os.path.abspath(os.path.join('task', 'Additional_info', 'group_2.txt')), 'r', encoding='utf-8')
#
# for i_line in file:
#     info = i_line.split()
#     summa += int(info[2])
#     diff -= int(info[2])
#
# for line in file_2:
#     info = line.split()
#     compose *= int(info[2])
#
# file.close()
# file_2.close()
#
# print(f'Сумма: {summa}\nРазность: {diff}\nПроизведение: {compose}')


# Задача 2. Поиск файла 2
# Как мы помним, скрипты — это просто куча строк текста, хоть они и понятны только
# программисту. Таким образом, с ними можно работать точно так же, как и с обычными текстовыми файлами. Используя
# функцию поиска файла из предыдущего урока, реализуйте программу, которая находит внутри указанного пути все файлы с
# искомым названием и выводит на экран текст одного из них (выбор можно сгенерировать случайно). Подсказка: можно
# использовать, например, список для сохранения найденного пути.

# def find_file(cur_path, file_name):
#     all_paths = []
#     for i_elem in os.listdir(cur_path):
#         path = os.path.join(cur_path, i_elem)
#         if file_name == i_elem:
#             all_paths.append(os.path.abspath(path))
#         elif os.path.isdir(path):
#             result = find_file(path, file_name)
#             if result:
#                 all_paths.extend(result)
#
#     return all_paths
#
#
# def check_file_inside(path_to_file):
#     file = open(path_to_file, 'r', encoding='utf8')
#     for line in file:
#         print(f'{line}\n')
#     file.close()
#
#
# all_paths = find_file('../pet_project', 'test01.txt')
# check_file_inside(random.choice(all_paths))

# speakers_file = open('speakers.txt', 'r', encoding='utf-8')
# sym_count = []
# for i_line in speakers_file:
#     print(i_line, end='')
#     sym_count.append(str(len(i_line)))
# sym_count_str = '\n'.join(sym_count)
# speakers_file.close()
#
# counts_file = open('sym_count.txt', 'w')
# counts_file.write(sym_count_str)
# counts_file.write(str(50))
# counts_file.close()


# def find_file(cur_path, file_name):
#     print(f'переходим: {cur_path}')
#
#     for i_elem in os.listdir(cur_path):
#         path = os.path.join(cur_path, i_elem)
#         print(f'\t\tсмотрим {path}')
#         if file_name == i_elem:
#             return path
#         if os.path.isdir(path):
#             print(f'{path} это директория')
#             result = find_file(path, file_name)
#             if result:
#                 break
#     else:
#         result = None
#
#     return result
#
#
# # file_path = find_file(os.path.abspath(os.path.join('../../..', '..', 'backup')), 'config.sh')
# file_path = find_file(os.path.abspath(os.path.join('../../..', '..', 'documents')), 'squid.conf')
# hystory_file = open('search_hystory.txt', 'a')
#
# if file_path:
#     print(f'Абсолютный путь к файлу: {file_path}')
#     hystory_file.write(f'{file_path} \n')
# else:
#     print('Файл не найден')
# hystory_file.close()

# Задача 1. Сумма чисел
# Во входном файле numbers.txt записано N целых чисел, каждое в отдельной строке. Напишите
# программу, которая выводит их сумму в выходной файл answer.txt.
# numbers_file = open('numbers.txt', 'r')
# summary_file = open('anwswer.txt', 'a')
# summ = 0
# for value in numbers_file:
#     summ += int(value)
# summary_file.write(str(summ))
# numbers_file.close()
# summary_file.close()

# Задача 2. Всё в одном
# Ваш друг, который тоже проходит курс Python Basic, поехал с ноутбуком в другой город,
# и там у него случилась беда: его диск пришлось отформатировать, а доступ в интернет отсутствует. Остался только
# телефон с мобильным интернетом. Так как со связью (и с памятью) проблемы, друг попросил вас скинуть одним файлом
# все решения и скрипты, которые у вас сейчас есть. Напишите программу, которая копирует код каждого скрипта в папке
# проекта python_basic в файл scripts.txt, разделяя код строкой из 40 символов *.

def find_file(cur_path, ending):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if i_elem.endswith(ending):
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, ending)
            if result:
                all_paths.extend(result)

    return all_paths


def get_text_from_file(path_to_file):
    file = open(path_to_file, "r", encoding="utf8")
    result = ""
    for line in file:
        result += line
    return result


all_py_files = find_file(os.path.abspath(os.path.join('..', '..', 'skillbox')), '.py')

file_result = open("scripts.txt", "w", encoding="utf8")

for file_path in all_py_files:
    file_result.write(get_text_from_file(file_path))
    file_result.write("\n" * 2 + "*" * 80 + "\n" * 2)

********************************************************************************

import math

# start = 'hello world'.capitalize()
# print(f'{start}')
# print(7 + 3)
# print('7 + 3 =', 7 + 3)
# print(1, 2, 3, 4, 5, sep=' + ', end='\n')
# speed = 90
# time = 8
# dist = speed * time
# print(f'{dist}')
# number_one = 11
# number_two = 6
# print(f'{number_one // number_two}')
# print(f'{number_one % number_two}')
# print(f'{number_one ** number_two}')
# print(math.factorial(1000))
# print('Здравствуйте, пожалуйста представитесь')
# username = input('Введите имя: ').title()
# print(f'Привет, {username}!')
# var_a = int(input('Введите значение А: '))
# var_b = int(input('Введите значение В: '))
# print(f'{var_a + var_b}')
# ask_name_phrase = 'Как тебя зовут?'
# print(f'{ask_name_phrase}- спросил я')
# name_phrase = 'Бонд, Джеймс Бонд'
# print(f'Он ответил: {name_phrase}')
# string_a = 10
# int_b = 20
# print(f'{str(string_a)} + {str(int_b)} = {str(string_a + int_b)}')
# var_one = 'hello world!'.title()
# print(f'{var_one * 3}')
# print(len(var_one))
# print(var_one[::2])
# print(var_one[::-1])

# print(var_one.find('o'))
# # print(var_one.find('o', 5))
# # print(var_one.rfind('o'))
# # print(var_one.replace('o', '0'))
# # print(var_one.count('o'))

# input_string = input('Введите строку: ')
# input_string = 'in the hole in the ground there liver a hobbit'
# left_letter_h = input_string.find('h')
# right_letter_h = input_string.rfind('h')
# output_sting = input_string[:left_letter_h] + input_string[right_letter_h:]
# print(f"{input_string[:input_string.find('h')] + input_string[input_string.rfind('h'):]}")

# var_two = int(input('Введите число'))
# if var_two >= 0:
#     var_two = - var_two
#     print(f'{var_two}')
# else:
#     print(f'{-var_two}')

# input_int_one = int(input('введите первое число: '))
# input_int_two = int(input('введите второе число: '))
# input_int_three = int(input('введите третье число: '))
#
# if input_int_one > input_int_two and input_int_one > input_int_three:
#     print(f'Максимальное число {input_int_one}')
# elif input_int_two > input_int_one and input_int_two > input_int_three:
#     print(f'Максимальное число {input_int_two}')
# else:
#     print(f'Максимальное число {input_int_three}')

# if (0.1 + 0.2 - 0.3) < 10 ** -13:
#     print('YES')
# else:
#     print('NO')

# float_number = 2.5
# print(int(float_number))
# print(round(-float_number, 3))
# print(math.floor(float_number))

# while
# number_input = int(input('Введите число: '))
# min_number = number_input
# count = 1
# while min_number != 0:
#     number_input = int(input('Введите число: '))
#     if number_input < min_number:
#         min_number = number_input
#
# print(f'{min_number}')

# num = 1
# check_num = True
# while check_num:
#     print(f'{num}')
#     num += 1
#     if num > 100:
#         check_num = False

# number_for_while = 1
# while number_for_while < 100:
#     print(number_for_while)
#     number_for_while += 1
#     if number_for_while > 50:
#         break
# else:
#     print('нормальный выход')

# number_one = -1
# while number_one != 0:
#     number_one = int(input('Введите число: '))
#     if number_one <= 0:
#         continue
#     print(f'{number_one}')

# dist = int(input('Введите растояние: '))

# def sorted_number(num_one, num_two):
#     if num_one < num_two:
#         return num_one, num_two
#     else:
#         return num_two, num_one
#
#
# number_one = int(input('Введите числа: '))
# number_two = int(input('Введите числа: '))
# minimum, maximum = sorted_number(number_one, number_two)
#
# print(f'{minimum, maximum}')


# def is_even(number):
#     return number % 2 == 0
#
#
# num = int(input('Введите число: '))
#
# if is_even(num):
#     print(f'{num} is even')
# else:
#     print(f'{num} is not even')

# def power(a, n):
#     if n == 1:
#         return a
#     return a * power(a, n - 1)
#
#
# int_num = int(input('Введите число: '))
# int_degree = int(input('Введите степень числа: '))
#
# print(f'{int_num} ** {int_degree} = {power(int_degree, int_num)}')

# flavor_list = ['ваниль', 'шоколад', 'пекан', 'земляника']
# for flavor in flavor_list:
#     print( '%s имеет чудесный вкус ' %flavor)

# import math
# def find_squares(num, squares_amount):
#     if squares_amount == 1:
#         if math.sqrt(num) == int(math.sqrt(num)):
#             return [int(math.sqrt(num))]
#         return False
#     temporary = 1
#     while temporary * temporary < num:
#         result = find_squares(num - temporary * temporary, squares_amount - 1)
#         if result:
#             return [temporary] + result
#         temporary += 1
#     return False
#
#
# tries = {0: 1, 1: 1, 2: 2, 3: 3}
# number = int(input('Введите число: '))
# for index in range(tries[number % 4], 5):
#     squares = (find_squares(number, index))
#     if squares:
#         print(f'Квадрат(ы): {squares} дают в сумме число: {number}')
#         break

# def lagrange(n, level):
#     if level == 0:
#         return 0
#     sqrtn = int(n ** 0.5)
#     if sqrtn * sqrtn == n:
#         return str(sqrtn)
#     while sqrtn > 0:
#         if lagrange(n - sqrtn * sqrtn, level - 1) != 0:
#             return str(sqrtn) + " " + lagrange(n - sqrtn * sqrtn, level - 1)
#         sqrtn -= 1
#     return 0
#
#
# n = int(input('Введите число: '))
# print(lagrange(n, 4))


# list_1 = [1, 2, 3, 4]
# list_2 = list_1[:]
# print(f'{list_2}')
#
# dist = {1: 2, 3: 4}
# x = dist.copy()
# x[1] = 5
# print(x, dist)

# person_2 = ('Ivan', 'Ivanov', 27)
# tuple_1 = (1, 2)
# tuple_2 = (3, 4)
# print({tuple_1 + tuple_2})
# tuple_str = ('Hello!')
# name, surname, age = person_2
#
# name_user = 'Maxim'
# surname_user = 'Porechin'
# age_user = 33
# tuple_user = (name_user, surname_user, age_user)
#
# my_iterable_range = range(10, -10, -1)
# print(list(my_iterable_range))
#
# apple = (color for color in ('red', 'green', 'yellow'))
# print(apple)

# for index in range(1, 11):
#     for j_index in range(1, 11):
#         print(index * j_index, end='\t')
#     print('')

# n = int(input('Введите число: '))
# for i in range(n):
#     print("+___", end=" ")
# print()
# for i in range(n):
#     print("|%s /" % (i + 1), end=" ")
# print()
# for i in range(n):
#     print("|__\\", end=" ")
# print()
# for i in range(n):
#     print("|   ", end=" ")
# print()

# var_int_one = 2337
# var_int_two = var_int_one
# var_int_one = 2338
#
# my_list_one = [2337]
# my_list_two = my_list_one
# my_list_one[0] = 2338
#
# my_list = list('hello!')
# print(f'{my_list}')
# print(f'{len(my_list)}')
#
#
# def replace_first_elem(lst, var_chng='C'):
#     lst[0] = var_chng
#     return lst
#
#
# temp_list = list('abcde')
# change_symbol = 'h'
# print(replace_first_elem(temp_list, change_symbol))
# print('*'.join(replace_first_elem(temp_list, change_symbol)))
#
# input_str = input('Введите ФИО: ').title().split()
my_FIO_list = ['Porechin', 'maxim', 'valentinovich']
my_num_list = [1, 1, 22, 3, 3, 5, 6, 7, 7, 0, 0, 2]
my_new_num_list = [-1, -2, -3]
# surname, name, otch = my_FIO_list
# print(input_str)

# my_score_list = list(map(int, input('Введите список: ').split()))
# print(f'{my_score_list}')
#
# my_score_list_str = list(map(str, input('Введите список: ').split()))
# print(''.join(map(str, my_score_list_str)))

# print(my_num_list.count(3))
# my_num_list.append(23)
# print(my_num_list)
my_num_list.extend(my_new_num_list)
# my_num_list.remove(7)
# print(my_num_list)
#
my_num_list_copy = my_num_list.copy()
# my_num_list_copy[2] = 9999
# print(my_num_list, my_num_list_copy)
# my_num_list_copy.insert(8, 6666)
# print(my_num_list_copy)
# my_num_list_copy.pop()
# print(my_num_list_copy)
# my_num_list_copy.pop(3)
# print(my_num_list_copy)
# my_num_list_copy.sort(reverse=True)
# print(my_num_list_copy)
# sorted_list = sorted(my_num_list_copy, reverse=True)
# print(sorted_list)

# list_people = [(178, 'Petya'),
#               (156, 'Ivan'),
#               (189, 'Maxim'),
#               (-78, 'Zakhar')
#               ]
#
# def inverse_height(lst):
#     return (-lst[0], lst[1])
#
# list_people.sort(key=inverse_height)
# print(*list_people)

# def IsAscending(lst):
#     i = 1
#     while i < len(lst) and lst[i] > lst[i - 1]:
#         i += 1
#     if i == len(lst):
#         return "YES"
#     else:
#         return "NO"
#
#
# my_num_list_merge = list(map(int, input('Введите числа: ').split()))
# print(IsAscending(my_num_list_merge))


class Complex:
    def __int__(self, re=0, im=0):
        self.re = re
        self.im = im

    def __str__(self):
        strRep = str(self.re)
        if self.im >= 0:
            strRep += '+'
        strRep += str(self.im) + 'i'
        return strRep

    def __add__(self, other):
        newRe = self.re + other.re
        newIm = self.im + other.im
        return Complex(newRe, newIm)


class Point(Complex):
    def length(self):
        return (self.re ** 2 + self.im ** 2) ** (1 / 2)

    def __str__(self):
        return str((self.re, self.im))


a = Complex(1, 2)
b = Complex(3)
print(a.length())
c = Complex()
print(a + b)




********************************************************************************

